let resolve,join,existsSync,rmdirSync,mkdirSync,readdirSync,copyFileSync;_34e‍.x([["default",()=>_34e‍.o],["meta",()=>meta]]);_34e‍.w("path",[["resolve",["resolve"],function(v){resolve=v}],["join",["join"],function(v){join=v}]]);_34e‍.w("fs",[["existsSync",["existsSync"],function(v){existsSync=v}],["rmdirSync",["rmdirSync"],function(v){rmdirSync=v}],["mkdirSync",["mkdirSync"],function(v){mkdirSync=v}],["readdirSync",["readdirSync"],function(v){readdirSync=v}],["copyFileSync",["copyFileSync"],function(v){copyFileSync=v}]]);_34e‍.w("vue");_34e‍.w("@vue/composition-api",[["computed",null,_34e‍.f("computed","computed")],["createComponent",null,_34e‍.f("createComponent","createComponent")],["createElement",null,_34e‍.f("createElement","createElement")],["getCurrentInstance",null,_34e‍.f("getCurrentInstance","getCurrentInstance")],["inject",null,_34e‍.f("inject","inject")],["isReactive",null,_34e‍.f("isReactive","isReactive")],["isRef",null,_34e‍.f("isRef","isRef")],["markRaw",null,_34e‍.f("markRaw","markRaw")],["nextTick",null,_34e‍.f("nextTick","nextTick")],["onActivated",null,_34e‍.f("onActivated","onActivated")],["onBeforeMount",null,_34e‍.f("onBeforeMount","onBeforeMount")],["onBeforeUnmount",null,_34e‍.f("onBeforeUnmount","onBeforeUnmount")],["onBeforeUpdate",null,_34e‍.f("onBeforeUpdate","onBeforeUpdate")],["onDeactivated",null,_34e‍.f("onDeactivated","onDeactivated")],["onErrorCaptured",null,_34e‍.f("onErrorCaptured","onErrorCaptured")],["onMounted",null,_34e‍.f("onMounted","onMounted")],["onServerPrefetch",null,_34e‍.f("onServerPrefetch","onServerPrefetch")],["onUnmounted",null,_34e‍.f("onUnmounted","onUnmounted")],["onUpdated",null,_34e‍.f("onUpdated","onUpdated")],["provide",null,_34e‍.f("provide","provide")],["reactive",null,_34e‍.f("reactive","reactive")],["ref",null,_34e‍.f("ref","ref")],["set",null,_34e‍.f("set","set")],["shallowReactive",null,_34e‍.f("shallowReactive","shallowReactive")],["shallowRef",null,_34e‍.f("shallowRef","shallowRef")],["toRaw",null,_34e‍.f("toRaw","toRaw")],["toRef",null,_34e‍.f("toRef","toRef")],["toRefs",null,_34e‍.f("toRefs","toRefs")],["triggerRef",null,_34e‍.f("triggerRef","triggerRef")],["unref",null,_34e‍.f("unref","unref")],["watch",null,_34e‍.f("watch","watch")],["watchEffect",null,_34e‍.f("watchEffect","watchEffect")]]);_34e‍.w("./entrypoint.js",[["defineComponent",null,_34e‍.f("defineComponent","defineComponent")],["globalPlugin",null,_34e‍.f("globalPlugin","globalPlugin")],["onGlobalSetup",null,_34e‍.f("onGlobalSetup","onGlobalSetup")],["setSSRContext",null,_34e‍.f("setSSRContext","setSSRContext")],["shallowSsrRef",null,_34e‍.f("shallowSsrRef","shallowSsrRef")],["ssrPromise",null,_34e‍.f("ssrPromise","ssrPromise")],["ssrRef",null,_34e‍.f("ssrRef","ssrRef")],["useAsync",null,_34e‍.f("useAsync","useAsync")],["useContext",null,_34e‍.f("useContext","useContext")],["useFetch",null,_34e‍.f("useFetch","useFetch")],["useMeta",null,_34e‍.f("useMeta","useMeta")],["useStatic",null,_34e‍.f("useStatic","useStatic")],["withContext",null,_34e‍.f("withContext","withContext")]]);_34e‍.w("defu");






// eslint-disable-next-line
const utils = require('@nuxt/utils');
const compositionApiModule = function () {
    var _a, _b, _c;
    const libRoot = resolve(__dirname, '..');
    let corejsPolyfill;
    try {
        // eslint-disable-next-line
        const corejsPkg = require('core-js/package.json');
        corejsPolyfill = corejsPkg.version.slice(0, 1);
    }
    catch (_d) {
        corejsPolyfill = undefined;
    }
    const { dst: pluginDst } = this.addTemplate({
        src: resolve(libRoot, 'lib', 'plugin.js'),
        fileName: join('composition-api', 'plugin.js'),
        options: {
            corejsPolyfill,
        },
    });
    const staticPath = join(this.options.buildDir || '', 'static-json');
    this.nuxt.hook('generate:before', () => {
        if (existsSync(staticPath))
            rmdirSync(staticPath);
        mkdirSync(staticPath);
    });
    this.nuxt.hook('generate:done', async (generator) => {
        if (!existsSync(staticPath))
            return;
        const { distPath } = generator;
        readdirSync(staticPath).forEach(file => copyFileSync(join(staticPath, file), join(distPath, file)));
    });
    const globalName = this.options.globalName || 'nuxt';
    const globalContextFactory = ((_a = this.options.globals) === null || _a === void 0 ? void 0 : _a.context) ||
        ((globalName) => `__${globalName.toUpperCase()}__`);
    const globalNuxtFactory = ((_b = this.options.globals) === null || _b === void 0 ? void 0 : _b.nuxt) || ((globalName) => `$${globalName}`);
    const globalContext = globalContextFactory(globalName);
    const globalNuxt = globalNuxtFactory(globalName);
    const { dst: entryDst } = this.addTemplate({
        src: resolve(libRoot, 'lib', 'entrypoint.js'),
        fileName: join('composition-api', 'index.js'),
        options: {
            isFullStatic: 'isFullStatic' in utils && utils.isFullStatic(this.options),
            staticPath,
            publicPath: join(((_c = this.options.router) === null || _c === void 0 ? void 0 : _c.base) || '', '/'),
            globalContext,
            globalNuxt,
        },
    });
    this.options.build = this.options.build || {};
    this.options.build.babel = this.options.build.babel || {};
    this.options.build.babel.plugins = this.options.build.babel.plugins || [];
    if (this.options.build.babel.plugins instanceof Function) {
        console.warn('Unable to automatically add Babel plugin. Make sure your custom `build.babel.plugins` returns `nuxt-composition-api/babel`');
    }
    else {
        this.options.build.babel.plugins.push(join(__dirname, 'babel'));
    }
    this.options.build.transpile = this.options.build.transpile || [];
    this.options.build.transpile.push(/nuxt-composition-api/);
    this.extendBuild(config => {
        config.resolve = config.resolve || {};
        config.resolve.alias = config.resolve.alias || {};
        config.resolve.alias['nuxt-composition-api'] = resolve(this.options.buildDir || '', entryDst);
    });
    this.options.plugins = this.options.plugins || [];
    this.options.plugins.unshift(resolve(this.options.buildDir || '', pluginDst));
};
// eslint-disable-next-line
const meta = require('../package.json');

_34e‍.d(compositionApiModule);

