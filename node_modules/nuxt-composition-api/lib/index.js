import { resolve, join } from 'path';
import { existsSync, rmdirSync, mkdirSync, readdirSync, copyFileSync } from 'fs';
import 'vue';
export { computed, createComponent, createElement, getCurrentInstance, inject, isReactive, isRef, markRaw, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onServerPrefetch, onUnmounted, onUpdated, provide, reactive, ref, set, shallowReactive, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, watch, watchEffect } from '@vue/composition-api';
export { defineComponent, globalPlugin, onGlobalSetup, setSSRContext, shallowSsrRef, ssrPromise, ssrRef, useAsync, useContext, useFetch, useMeta, useStatic, withContext } from './entrypoint.js';
import 'defu';

// eslint-disable-next-line
const utils = require('@nuxt/utils');
const compositionApiModule = function () {
    var _a, _b, _c;
    const libRoot = resolve(__dirname, '..');
    let corejsPolyfill;
    try {
        // eslint-disable-next-line
        const corejsPkg = require('core-js/package.json');
        corejsPolyfill = corejsPkg.version.slice(0, 1);
    }
    catch (_d) {
        corejsPolyfill = undefined;
    }
    const { dst: pluginDst } = this.addTemplate({
        src: resolve(libRoot, 'lib', 'plugin.js'),
        fileName: join('composition-api', 'plugin.js'),
        options: {
            corejsPolyfill,
        },
    });
    const staticPath = join(this.options.buildDir || '', 'static-json');
    this.nuxt.hook('generate:before', () => {
        if (existsSync(staticPath))
            rmdirSync(staticPath);
        mkdirSync(staticPath);
    });
    this.nuxt.hook('generate:done', async (generator) => {
        if (!existsSync(staticPath))
            return;
        const { distPath } = generator;
        readdirSync(staticPath).forEach(file => copyFileSync(join(staticPath, file), join(distPath, file)));
    });
    const globalName = this.options.globalName || 'nuxt';
    const globalContextFactory = ((_a = this.options.globals) === null || _a === void 0 ? void 0 : _a.context) ||
        ((globalName) => `__${globalName.toUpperCase()}__`);
    const globalNuxtFactory = ((_b = this.options.globals) === null || _b === void 0 ? void 0 : _b.nuxt) || ((globalName) => `$${globalName}`);
    const globalContext = globalContextFactory(globalName);
    const globalNuxt = globalNuxtFactory(globalName);
    const { dst: entryDst } = this.addTemplate({
        src: resolve(libRoot, 'lib', 'entrypoint.js'),
        fileName: join('composition-api', 'index.js'),
        options: {
            isFullStatic: 'isFullStatic' in utils && utils.isFullStatic(this.options),
            staticPath,
            publicPath: join(((_c = this.options.router) === null || _c === void 0 ? void 0 : _c.base) || '', '/'),
            globalContext,
            globalNuxt,
        },
    });
    this.options.build = this.options.build || {};
    this.options.build.babel = this.options.build.babel || {};
    this.options.build.babel.plugins = this.options.build.babel.plugins || [];
    if (this.options.build.babel.plugins instanceof Function) {
        console.warn('Unable to automatically add Babel plugin. Make sure your custom `build.babel.plugins` returns `nuxt-composition-api/babel`');
    }
    else {
        this.options.build.babel.plugins.push(join(__dirname, 'babel'));
    }
    this.options.build.transpile = this.options.build.transpile || [];
    this.options.build.transpile.push(/nuxt-composition-api/);
    this.extendBuild(config => {
        config.resolve = config.resolve || {};
        config.resolve.alias = config.resolve.alias || {};
        config.resolve.alias['nuxt-composition-api'] = resolve(this.options.buildDir || '', entryDst);
    });
    this.options.plugins = this.options.plugins || [];
    this.options.plugins.unshift(resolve(this.options.buildDir || '', pluginDst));
};
// eslint-disable-next-line
const meta = require('../package.json');

export default compositionApiModule;
export { meta };
