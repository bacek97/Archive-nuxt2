'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var fs = require('fs');
require('vue');
var CompositionApi = require('@vue/composition-api');
var CompositionApi__default = _interopDefault(CompositionApi);
var entrypoint = require('./entrypoint.js');
require('defu');

// eslint-disable-next-line
const utils = require('@nuxt/utils');
const compositionApiModule = function () {
    var _a, _b, _c;
    const libRoot = path.resolve(__dirname, '..');
    let corejsPolyfill;
    try {
        // eslint-disable-next-line
        const corejsPkg = require('core-js/package.json');
        corejsPolyfill = corejsPkg.version.slice(0, 1);
    }
    catch (_d) {
        corejsPolyfill = undefined;
    }
    const { dst: pluginDst } = this.addTemplate({
        src: path.resolve(libRoot, 'lib', 'plugin.js'),
        fileName: path.join('composition-api', 'plugin.js'),
        options: {
            corejsPolyfill,
        },
    });
    const staticPath = path.join(this.options.buildDir || '', 'static-json');
    this.nuxt.hook('generate:before', () => {
        if (fs.existsSync(staticPath))
            fs.rmdirSync(staticPath);
        fs.mkdirSync(staticPath);
    });
    this.nuxt.hook('generate:done', async (generator) => {
        if (!fs.existsSync(staticPath))
            return;
        const { distPath } = generator;
        fs.readdirSync(staticPath).forEach(file => fs.copyFileSync(path.join(staticPath, file), path.join(distPath, file)));
    });
    const globalName = this.options.globalName || 'nuxt';
    const globalContextFactory = ((_a = this.options.globals) === null || _a === void 0 ? void 0 : _a.context) ||
        ((globalName) => `__${globalName.toUpperCase()}__`);
    const globalNuxtFactory = ((_b = this.options.globals) === null || _b === void 0 ? void 0 : _b.nuxt) || ((globalName) => `$${globalName}`);
    const globalContext = globalContextFactory(globalName);
    const globalNuxt = globalNuxtFactory(globalName);
    const { dst: entryDst } = this.addTemplate({
        src: path.resolve(libRoot, 'lib', 'entrypoint.js'),
        fileName: path.join('composition-api', 'index.js'),
        options: {
            isFullStatic: 'isFullStatic' in utils && utils.isFullStatic(this.options),
            staticPath,
            publicPath: path.join(((_c = this.options.router) === null || _c === void 0 ? void 0 : _c.base) || '', '/'),
            globalContext,
            globalNuxt,
        },
    });
    this.options.build = this.options.build || {};
    this.options.build.babel = this.options.build.babel || {};
    this.options.build.babel.plugins = this.options.build.babel.plugins || [];
    if (this.options.build.babel.plugins instanceof Function) {
        console.warn('Unable to automatically add Babel plugin. Make sure your custom `build.babel.plugins` returns `nuxt-composition-api/babel`');
    }
    else {
        this.options.build.babel.plugins.push(path.join(__dirname, 'babel'));
    }
    this.options.build.transpile = this.options.build.transpile || [];
    this.options.build.transpile.push(/nuxt-composition-api/);
    this.extendBuild(config => {
        config.resolve = config.resolve || {};
        config.resolve.alias = config.resolve.alias || {};
        config.resolve.alias['nuxt-composition-api'] = path.resolve(this.options.buildDir || '', entryDst);
    });
    this.options.plugins = this.options.plugins || [];
    this.options.plugins.unshift(path.resolve(this.options.buildDir || '', pluginDst));
};
// eslint-disable-next-line
const meta = require('../package.json');

Object.defineProperty(exports, 'computed', {
  enumerable: true,
  get: function () {
    return CompositionApi.computed;
  }
});
Object.defineProperty(exports, 'createComponent', {
  enumerable: true,
  get: function () {
    return CompositionApi.createComponent;
  }
});
Object.defineProperty(exports, 'createElement', {
  enumerable: true,
  get: function () {
    return CompositionApi.createElement;
  }
});
Object.defineProperty(exports, 'getCurrentInstance', {
  enumerable: true,
  get: function () {
    return CompositionApi.getCurrentInstance;
  }
});
Object.defineProperty(exports, 'inject', {
  enumerable: true,
  get: function () {
    return CompositionApi.inject;
  }
});
Object.defineProperty(exports, 'isReactive', {
  enumerable: true,
  get: function () {
    return CompositionApi.isReactive;
  }
});
Object.defineProperty(exports, 'isRef', {
  enumerable: true,
  get: function () {
    return CompositionApi.isRef;
  }
});
Object.defineProperty(exports, 'markRaw', {
  enumerable: true,
  get: function () {
    return CompositionApi.markRaw;
  }
});
Object.defineProperty(exports, 'nextTick', {
  enumerable: true,
  get: function () {
    return CompositionApi.nextTick;
  }
});
Object.defineProperty(exports, 'onActivated', {
  enumerable: true,
  get: function () {
    return CompositionApi.onActivated;
  }
});
Object.defineProperty(exports, 'onBeforeMount', {
  enumerable: true,
  get: function () {
    return CompositionApi.onBeforeMount;
  }
});
Object.defineProperty(exports, 'onBeforeUnmount', {
  enumerable: true,
  get: function () {
    return CompositionApi.onBeforeUnmount;
  }
});
Object.defineProperty(exports, 'onBeforeUpdate', {
  enumerable: true,
  get: function () {
    return CompositionApi.onBeforeUpdate;
  }
});
Object.defineProperty(exports, 'onDeactivated', {
  enumerable: true,
  get: function () {
    return CompositionApi.onDeactivated;
  }
});
Object.defineProperty(exports, 'onErrorCaptured', {
  enumerable: true,
  get: function () {
    return CompositionApi.onErrorCaptured;
  }
});
Object.defineProperty(exports, 'onMounted', {
  enumerable: true,
  get: function () {
    return CompositionApi.onMounted;
  }
});
Object.defineProperty(exports, 'onServerPrefetch', {
  enumerable: true,
  get: function () {
    return CompositionApi.onServerPrefetch;
  }
});
Object.defineProperty(exports, 'onUnmounted', {
  enumerable: true,
  get: function () {
    return CompositionApi.onUnmounted;
  }
});
Object.defineProperty(exports, 'onUpdated', {
  enumerable: true,
  get: function () {
    return CompositionApi.onUpdated;
  }
});
Object.defineProperty(exports, 'provide', {
  enumerable: true,
  get: function () {
    return CompositionApi.provide;
  }
});
Object.defineProperty(exports, 'reactive', {
  enumerable: true,
  get: function () {
    return CompositionApi.reactive;
  }
});
Object.defineProperty(exports, 'ref', {
  enumerable: true,
  get: function () {
    return CompositionApi.ref;
  }
});
Object.defineProperty(exports, 'set', {
  enumerable: true,
  get: function () {
    return CompositionApi.set;
  }
});
Object.defineProperty(exports, 'shallowReactive', {
  enumerable: true,
  get: function () {
    return CompositionApi.shallowReactive;
  }
});
Object.defineProperty(exports, 'shallowRef', {
  enumerable: true,
  get: function () {
    return CompositionApi.shallowRef;
  }
});
Object.defineProperty(exports, 'toRaw', {
  enumerable: true,
  get: function () {
    return CompositionApi.toRaw;
  }
});
Object.defineProperty(exports, 'toRef', {
  enumerable: true,
  get: function () {
    return CompositionApi.toRef;
  }
});
Object.defineProperty(exports, 'toRefs', {
  enumerable: true,
  get: function () {
    return CompositionApi.toRefs;
  }
});
Object.defineProperty(exports, 'triggerRef', {
  enumerable: true,
  get: function () {
    return CompositionApi.triggerRef;
  }
});
Object.defineProperty(exports, 'unref', {
  enumerable: true,
  get: function () {
    return CompositionApi.unref;
  }
});
Object.defineProperty(exports, 'watch', {
  enumerable: true,
  get: function () {
    return CompositionApi.watch;
  }
});
Object.defineProperty(exports, 'watchEffect', {
  enumerable: true,
  get: function () {
    return CompositionApi.watchEffect;
  }
});
exports.defineComponent = entrypoint.defineComponent;
exports.globalPlugin = entrypoint.globalPlugin;
exports.onGlobalSetup = entrypoint.onGlobalSetup;
exports.setSSRContext = entrypoint.setSSRContext;
exports.shallowSsrRef = entrypoint.shallowSsrRef;
exports.ssrPromise = entrypoint.ssrPromise;
exports.ssrRef = entrypoint.ssrRef;
exports.useAsync = entrypoint.useAsync;
exports.useContext = entrypoint.useContext;
exports.useFetch = entrypoint.useFetch;
exports.useMeta = entrypoint.useMeta;
exports.useStatic = entrypoint.useStatic;
exports.withContext = entrypoint.withContext;
exports.default = compositionApiModule;
exports.meta = meta;
